// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gNMI.proto

#include "gNMI.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Alias_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AliasList_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal64_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Error_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelData_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Notification_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathElem_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathElem_KeyEntry_DoNotUse_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Poll_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QOSMarking_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScalarArray_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Subscription_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubscriptionList_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Update_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateResult_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gNMI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Value_gNMI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace gnmi {
class NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notification> _instance;
} _Notification_default_instance_;
class UpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Update> _instance;
} _Update_default_instance_;
class TypedValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypedValue> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 int_val_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_val_;
  bool bool_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_val_;
  float float_val_;
  const ::gnmi::Decimal64* decimal_val_;
  const ::gnmi::ScalarArray* leaflist_val_;
  const PROTOBUF_NAMESPACE_ID::Any* any_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_ietf_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ascii_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_bytes_;
} _TypedValue_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class PathElem_KeyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathElem_KeyEntry_DoNotUse> _instance;
} _PathElem_KeyEntry_DoNotUse_default_instance_;
class PathElemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathElem> _instance;
} _PathElem_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Value> _instance;
} _Value_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class Decimal64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal64> _instance;
} _Decimal64_default_instance_;
class ScalarArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarArray> _instance;
} _ScalarArray_default_instance_;
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
  const ::gnmi::SubscriptionList* subscribe_;
  const ::gnmi::Poll* poll_;
  const ::gnmi::AliasList* aliases_;
} _SubscribeRequest_default_instance_;
class PollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Poll> _instance;
} _Poll_default_instance_;
class SubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResponse> _instance;
  const ::gnmi::Notification* update_;
  bool sync_response_;
  const ::gnmi::Error* error_;
} _SubscribeResponse_default_instance_;
class SubscriptionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionList> _instance;
} _SubscriptionList_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subscription> _instance;
} _Subscription_default_instance_;
class QOSMarkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QOSMarking> _instance;
} _QOSMarking_default_instance_;
class AliasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alias> _instance;
} _Alias_default_instance_;
class AliasListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AliasList> _instance;
} _AliasList_default_instance_;
class SetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRequest> _instance;
} _SetRequest_default_instance_;
class SetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResponse> _instance;
} _SetResponse_default_instance_;
class UpdateResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateResult> _instance;
} _UpdateResult_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class CapabilityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapabilityRequest> _instance;
} _CapabilityRequest_default_instance_;
class CapabilityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapabilityResponse> _instance;
} _CapabilityResponse_default_instance_;
class ModelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelData> _instance;
} _ModelData_default_instance_;
}  // namespace gnmi
static void InitDefaultsscc_info_Alias_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Alias_default_instance_;
    new (ptr) ::gnmi::Alias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Alias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Alias_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Alias_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_AliasList_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_AliasList_default_instance_;
    new (ptr) ::gnmi::AliasList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::AliasList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AliasList_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AliasList_gNMI_2eproto}, {
      &scc_info_Alias_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_CapabilityRequest_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_CapabilityRequest_default_instance_;
    new (ptr) ::gnmi::CapabilityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::CapabilityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilityRequest_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CapabilityRequest_gNMI_2eproto}, {}};

static void InitDefaultsscc_info_CapabilityResponse_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_CapabilityResponse_default_instance_;
    new (ptr) ::gnmi::CapabilityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::CapabilityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CapabilityResponse_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CapabilityResponse_gNMI_2eproto}, {
      &scc_info_ModelData_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_Decimal64_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Decimal64_default_instance_;
    new (ptr) ::gnmi::Decimal64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Decimal64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal64_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal64_gNMI_2eproto}, {}};

static void InitDefaultsscc_info_Error_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Error_default_instance_;
    new (ptr) ::gnmi::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Error_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Error_gNMI_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_GetRequest_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_GetRequest_default_instance_;
    new (ptr) ::gnmi::GetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::GetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRequest_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetRequest_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_ModelData_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_GetResponse_default_instance_;
    new (ptr) ::gnmi::GetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::GetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetResponse_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetResponse_gNMI_2eproto}, {
      &scc_info_Notification_gNMI_2eproto.base,
      &scc_info_Error_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_ModelData_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_ModelData_default_instance_;
    new (ptr) ::gnmi::ModelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::ModelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelData_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelData_gNMI_2eproto}, {}};

static void InitDefaultsscc_info_Notification_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Notification_default_instance_;
    new (ptr) ::gnmi::Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Notification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Notification_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Notification_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_Update_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_Path_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Path_default_instance_;
    new (ptr) ::gnmi::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Path_gNMI_2eproto}, {
      &scc_info_PathElem_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_PathElem_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_PathElem_default_instance_;
    new (ptr) ::gnmi::PathElem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::PathElem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathElem_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PathElem_gNMI_2eproto}, {
      &scc_info_PathElem_KeyEntry_DoNotUse_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_PathElem_KeyEntry_DoNotUse_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_PathElem_KeyEntry_DoNotUse_default_instance_;
    new (ptr) ::gnmi::PathElem_KeyEntry_DoNotUse();
  }
  ::gnmi::PathElem_KeyEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathElem_KeyEntry_DoNotUse_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathElem_KeyEntry_DoNotUse_gNMI_2eproto}, {}};

static void InitDefaultsscc_info_Poll_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Poll_default_instance_;
    new (ptr) ::gnmi::Poll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Poll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Poll_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Poll_gNMI_2eproto}, {}};

static void InitDefaultsscc_info_QOSMarking_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_QOSMarking_default_instance_;
    new (ptr) ::gnmi::QOSMarking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::QOSMarking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QOSMarking_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QOSMarking_gNMI_2eproto}, {}};

static void InitDefaultsscc_info_ScalarArray_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_TypedValue_default_instance_;
    new (ptr) ::gnmi::TypedValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::gnmi::_ScalarArray_default_instance_;
    new (ptr) ::gnmi::ScalarArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::TypedValue::InitAsDefaultInstance();
  ::gnmi::ScalarArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScalarArray_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScalarArray_gNMI_2eproto}, {
      &scc_info_Decimal64_gNMI_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_SetRequest_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_SetRequest_default_instance_;
    new (ptr) ::gnmi::SetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::SetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetRequest_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetRequest_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_Update_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_SetResponse_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_SetResponse_default_instance_;
    new (ptr) ::gnmi::SetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::SetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetResponse_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SetResponse_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_UpdateResult_gNMI_2eproto.base,
      &scc_info_Error_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_SubscribeRequest_default_instance_;
    new (ptr) ::gnmi::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubscribeRequest_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubscribeRequest_gNMI_2eproto}, {
      &scc_info_SubscriptionList_gNMI_2eproto.base,
      &scc_info_Poll_gNMI_2eproto.base,
      &scc_info_AliasList_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeResponse_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_SubscribeResponse_default_instance_;
    new (ptr) ::gnmi::SubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::SubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeResponse_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscribeResponse_gNMI_2eproto}, {
      &scc_info_Notification_gNMI_2eproto.base,
      &scc_info_Error_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_Subscription_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Subscription_default_instance_;
    new (ptr) ::gnmi::Subscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Subscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Subscription_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Subscription_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionList_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_SubscriptionList_default_instance_;
    new (ptr) ::gnmi::SubscriptionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::SubscriptionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubscriptionList_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SubscriptionList_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_Subscription_gNMI_2eproto.base,
      &scc_info_QOSMarking_gNMI_2eproto.base,
      &scc_info_ModelData_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_Update_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Update_default_instance_;
    new (ptr) ::gnmi::Update();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Update::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Update_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Update_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_Value_gNMI_2eproto.base,
      &scc_info_ScalarArray_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_UpdateResult_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_UpdateResult_default_instance_;
    new (ptr) ::gnmi::UpdateResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::UpdateResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateResult_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateResult_gNMI_2eproto}, {
      &scc_info_Path_gNMI_2eproto.base,
      &scc_info_Error_gNMI_2eproto.base,}};

static void InitDefaultsscc_info_Value_gNMI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnmi::_Value_default_instance_;
    new (ptr) ::gnmi::Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnmi::Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Value_gNMI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Value_gNMI_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gNMI_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gNMI_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gNMI_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gNMI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, timestamp_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, alias_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, update_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, delete__),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, atomic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, value_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, val_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, duplicates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::TypedValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi::TypedValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gnmi::TypedValueDefaultTypeInternal, string_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, int_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, uint_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, bool_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, bytes_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, float_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, decimal_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, leaflist_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, any_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, json_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, json_ietf_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, ascii_val_),
  offsetof(::gnmi::TypedValueDefaultTypeInternal, proto_bytes_),
  PROTOBUF_FIELD_OFFSET(::gnmi::TypedValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, element_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, origin_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, elem_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, target_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem, name_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Value, value_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Value, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, code_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, message_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Decimal64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Decimal64, digits_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Decimal64, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::ScalarArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::ScalarArray, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gnmi::SubscribeRequestDefaultTypeInternal, subscribe_),
  offsetof(::gnmi::SubscribeRequestDefaultTypeInternal, poll_),
  offsetof(::gnmi::SubscribeRequestDefaultTypeInternal, aliases_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Poll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gnmi::SubscribeResponseDefaultTypeInternal, update_),
  offsetof(::gnmi::SubscribeResponseDefaultTypeInternal, sync_response_),
  offsetof(::gnmi::SubscribeResponseDefaultTypeInternal, error_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, subscription_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, use_aliases_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, qos_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, mode_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, allow_aggregation_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, use_models_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, encoding_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, updates_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, mode_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, sample_interval_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, suppress_redundant_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, heartbeat_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::QOSMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::QOSMarking, marking_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Alias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::Alias, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Alias, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::AliasList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::AliasList, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, delete__),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, replace_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, response_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, message_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, timestamp_),
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, message_),
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, type_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, encoding_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, use_models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, notification_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, supported_models_),
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, supported_encodings_),
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, gnmi_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, name_),
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, organization_),
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnmi::Notification)},
  { 11, -1, sizeof(::gnmi::Update)},
  { 20, -1, sizeof(::gnmi::TypedValue)},
  { 39, -1, sizeof(::gnmi::Path)},
  { 48, 55, sizeof(::gnmi::PathElem_KeyEntry_DoNotUse)},
  { 57, -1, sizeof(::gnmi::PathElem)},
  { 64, -1, sizeof(::gnmi::Value)},
  { 71, -1, sizeof(::gnmi::Error)},
  { 79, -1, sizeof(::gnmi::Decimal64)},
  { 86, -1, sizeof(::gnmi::ScalarArray)},
  { 92, -1, sizeof(::gnmi::SubscribeRequest)},
  { 101, -1, sizeof(::gnmi::Poll)},
  { 106, -1, sizeof(::gnmi::SubscribeResponse)},
  { 115, -1, sizeof(::gnmi::SubscriptionList)},
  { 129, -1, sizeof(::gnmi::Subscription)},
  { 139, -1, sizeof(::gnmi::QOSMarking)},
  { 145, -1, sizeof(::gnmi::Alias)},
  { 152, -1, sizeof(::gnmi::AliasList)},
  { 158, -1, sizeof(::gnmi::SetRequest)},
  { 167, -1, sizeof(::gnmi::SetResponse)},
  { 176, -1, sizeof(::gnmi::UpdateResult)},
  { 185, -1, sizeof(::gnmi::GetRequest)},
  { 195, -1, sizeof(::gnmi::GetResponse)},
  { 202, -1, sizeof(::gnmi::CapabilityRequest)},
  { 207, -1, sizeof(::gnmi::CapabilityResponse)},
  { 215, -1, sizeof(::gnmi::ModelData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_TypedValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_PathElem_KeyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_PathElem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Decimal64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_ScalarArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Poll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SubscriptionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Subscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_QOSMarking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Alias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_AliasList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_UpdateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_CapabilityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_CapabilityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_ModelData_default_instance_),
};

const char descriptor_table_protodef_gNMI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngNMI.proto\022\004gnmi\032\031google/protobuf/any."
  "proto\"\226\001\n\014Notification\022\021\n\ttimestamp\030\001 \001("
  "\003\022\032\n\006prefix\030\002 \001(\0132\n.gnmi.Path\022\r\n\005alias\030\003"
  " \001(\t\022\034\n\006update\030\004 \003(\0132\014.gnmi.Update\022\032\n\006de"
  "lete\030\005 \003(\0132\n.gnmi.Path\022\016\n\006atomic\030\006 \001(\010\"u"
  "\n\006Update\022\030\n\004path\030\001 \001(\0132\n.gnmi.Path\022\036\n\005va"
  "lue\030\002 \001(\0132\013.gnmi.ValueB\002\030\001\022\035\n\003val\030\003 \001(\0132"
  "\020.gnmi.TypedValue\022\022\n\nduplicates\030\004 \001(\r\"\345\002"
  "\n\nTypedValue\022\024\n\nstring_val\030\001 \001(\tH\000\022\021\n\007in"
  "t_val\030\002 \001(\003H\000\022\022\n\010uint_val\030\003 \001(\004H\000\022\022\n\010boo"
  "l_val\030\004 \001(\010H\000\022\023\n\tbytes_val\030\005 \001(\014H\000\022\023\n\tfl"
  "oat_val\030\006 \001(\002H\000\022&\n\013decimal_val\030\007 \001(\0132\017.g"
  "nmi.Decimal64H\000\022)\n\014leaflist_val\030\010 \001(\0132\021."
  "gnmi.ScalarArrayH\000\022\'\n\007any_val\030\t \001(\0132\024.go"
  "ogle.protobuf.AnyH\000\022\022\n\010json_val\030\n \001(\014H\000\022"
  "\027\n\rjson_ietf_val\030\013 \001(\014H\000\022\023\n\tascii_val\030\014 "
  "\001(\tH\000\022\025\n\013proto_bytes\030\r \001(\014H\000B\007\n\005value\"Y\n"
  "\004Path\022\023\n\007element\030\001 \003(\tB\002\030\001\022\016\n\006origin\030\002 \001"
  "(\t\022\034\n\004elem\030\003 \003(\0132\016.gnmi.PathElem\022\016\n\006targ"
  "et\030\004 \001(\t\"j\n\010PathElem\022\014\n\004name\030\001 \001(\t\022$\n\003ke"
  "y\030\002 \003(\0132\027.gnmi.PathElem.KeyEntry\032*\n\010KeyE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"8\n\005"
  "Value\022\r\n\005value\030\001 \001(\014\022\034\n\004type\030\002 \001(\0162\016.gnm"
  "i.Encoding:\002\030\001\"N\n\005Error\022\014\n\004code\030\001 \001(\r\022\017\n"
  "\007message\030\002 \001(\t\022\"\n\004data\030\003 \001(\0132\024.google.pr"
  "otobuf.Any:\002\030\001\".\n\tDecimal64\022\016\n\006digits\030\001 "
  "\001(\003\022\021\n\tprecision\030\002 \001(\r\"0\n\013ScalarArray\022!\n"
  "\007element\030\001 \003(\0132\020.gnmi.TypedValue\"\212\001\n\020Sub"
  "scribeRequest\022+\n\tsubscribe\030\001 \001(\0132\026.gnmi."
  "SubscriptionListH\000\022\032\n\004poll\030\003 \001(\0132\n.gnmi."
  "PollH\000\022\"\n\007aliases\030\004 \001(\0132\017.gnmi.AliasList"
  "H\000B\t\n\007request\"\006\n\004Poll\"\200\001\n\021SubscribeRespo"
  "nse\022$\n\006update\030\001 \001(\0132\022.gnmi.NotificationH"
  "\000\022\027\n\rsync_response\030\003 \001(\010H\000\022 \n\005error\030\004 \001("
  "\0132\013.gnmi.ErrorB\002\030\001H\000B\n\n\010response\"\327\002\n\020Sub"
  "scriptionList\022\032\n\006prefix\030\001 \001(\0132\n.gnmi.Pat"
  "h\022(\n\014subscription\030\002 \003(\0132\022.gnmi.Subscript"
  "ion\022\023\n\013use_aliases\030\003 \001(\010\022\035\n\003qos\030\004 \001(\0132\020."
  "gnmi.QOSMarking\022)\n\004mode\030\005 \001(\0162\033.gnmi.Sub"
  "scriptionList.Mode\022\031\n\021allow_aggregation\030"
  "\006 \001(\010\022#\n\nuse_models\030\007 \003(\0132\017.gnmi.ModelDa"
  "ta\022 \n\010encoding\030\010 \001(\0162\016.gnmi.Encoding\022\024\n\014"
  "updates_only\030\t \001(\010\"&\n\004Mode\022\n\n\006STREAM\020\000\022\010"
  "\n\004ONCE\020\001\022\010\n\004POLL\020\002\"\237\001\n\014Subscription\022\030\n\004p"
  "ath\030\001 \001(\0132\n.gnmi.Path\022$\n\004mode\030\002 \001(\0162\026.gn"
  "mi.SubscriptionMode\022\027\n\017sample_interval\030\003"
  " \001(\004\022\032\n\022suppress_redundant\030\004 \001(\010\022\032\n\022hear"
  "tbeat_interval\030\005 \001(\004\"\035\n\nQOSMarking\022\017\n\007ma"
  "rking\030\001 \001(\r\"0\n\005Alias\022\030\n\004path\030\001 \001(\0132\n.gnm"
  "i.Path\022\r\n\005alias\030\002 \001(\t\"\'\n\tAliasList\022\032\n\005al"
  "ias\030\001 \003(\0132\013.gnmi.Alias\"\201\001\n\nSetRequest\022\032\n"
  "\006prefix\030\001 \001(\0132\n.gnmi.Path\022\032\n\006delete\030\002 \003("
  "\0132\n.gnmi.Path\022\035\n\007replace\030\003 \003(\0132\014.gnmi.Up"
  "date\022\034\n\006update\030\004 \003(\0132\014.gnmi.Update\"\204\001\n\013S"
  "etResponse\022\032\n\006prefix\030\001 \001(\0132\n.gnmi.Path\022$"
  "\n\010response\030\002 \003(\0132\022.gnmi.UpdateResult\022 \n\007"
  "message\030\003 \001(\0132\013.gnmi.ErrorB\002\030\001\022\021\n\ttimest"
  "amp\030\004 \001(\003\"\312\001\n\014UpdateResult\022\025\n\ttimestamp\030"
  "\001 \001(\003B\002\030\001\022\030\n\004path\030\002 \001(\0132\n.gnmi.Path\022 \n\007m"
  "essage\030\003 \001(\0132\013.gnmi.ErrorB\002\030\001\022(\n\002op\030\004 \001("
  "\0162\034.gnmi.UpdateResult.Operation\"=\n\tOpera"
  "tion\022\013\n\007INVALID\020\000\022\n\n\006DELETE\020\001\022\013\n\007REPLACE"
  "\020\002\022\n\n\006UPDATE\020\003\"\357\001\n\nGetRequest\022\032\n\006prefix\030"
  "\001 \001(\0132\n.gnmi.Path\022\030\n\004path\030\002 \003(\0132\n.gnmi.P"
  "ath\022\'\n\004type\030\003 \001(\0162\031.gnmi.GetRequest.Data"
  "Type\022 \n\010encoding\030\005 \001(\0162\016.gnmi.Encoding\022#"
  "\n\nuse_models\030\006 \003(\0132\017.gnmi.ModelData\";\n\010D"
  "ataType\022\007\n\003ALL\020\000\022\n\n\006CONFIG\020\001\022\t\n\005STATE\020\002\022"
  "\017\n\013OPERATIONAL\020\003\"W\n\013GetResponse\022(\n\014notif"
  "ication\030\001 \003(\0132\022.gnmi.Notification\022\036\n\005err"
  "or\030\002 \001(\0132\013.gnmi.ErrorB\002\030\001\"\023\n\021CapabilityR"
  "equest\"\202\001\n\022CapabilityResponse\022)\n\020support"
  "ed_models\030\001 \003(\0132\017.gnmi.ModelData\022+\n\023supp"
  "orted_encodings\030\002 \003(\0162\016.gnmi.Encoding\022\024\n"
  "\014gNMI_version\030\003 \001(\t\"@\n\tModelData\022\014\n\004name"
  "\030\001 \001(\t\022\024\n\014organization\030\002 \001(\t\022\017\n\007version\030"
  "\003 \001(\t*D\n\010Encoding\022\010\n\004JSON\020\000\022\t\n\005BYTES\020\001\022\t"
  "\n\005PROTO\020\002\022\t\n\005ASCII\020\003\022\r\n\tJSON_IETF\020\004*A\n\020S"
  "ubscriptionMode\022\022\n\016TARGET_DEFINED\020\000\022\r\n\tO"
  "N_CHANGE\020\001\022\n\n\006SAMPLE\020\0022\343\001\n\004gNMI\022A\n\014Capab"
  "ilities\022\027.gnmi.CapabilityRequest\032\030.gnmi."
  "CapabilityResponse\022*\n\003Get\022\020.gnmi.GetRequ"
  "est\032\021.gnmi.GetResponse\022*\n\003Set\022\020.gnmi.Set"
  "Request\032\021.gnmi.SetResponse\022@\n\tSubscribe\022"
  "\026.gnmi.SubscribeRequest\032\027.gnmi.Subscribe"
  "Response(\0010\001B\'Z%github.com/openconfig/gn"
  "mi/proto/gnmib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gNMI_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gNMI_2eproto_sccs[25] = {
  &scc_info_Alias_gNMI_2eproto.base,
  &scc_info_AliasList_gNMI_2eproto.base,
  &scc_info_CapabilityRequest_gNMI_2eproto.base,
  &scc_info_CapabilityResponse_gNMI_2eproto.base,
  &scc_info_Decimal64_gNMI_2eproto.base,
  &scc_info_Error_gNMI_2eproto.base,
  &scc_info_GetRequest_gNMI_2eproto.base,
  &scc_info_GetResponse_gNMI_2eproto.base,
  &scc_info_ModelData_gNMI_2eproto.base,
  &scc_info_Notification_gNMI_2eproto.base,
  &scc_info_Path_gNMI_2eproto.base,
  &scc_info_PathElem_gNMI_2eproto.base,
  &scc_info_PathElem_KeyEntry_DoNotUse_gNMI_2eproto.base,
  &scc_info_Poll_gNMI_2eproto.base,
  &scc_info_QOSMarking_gNMI_2eproto.base,
  &scc_info_ScalarArray_gNMI_2eproto.base,
  &scc_info_SetRequest_gNMI_2eproto.base,
  &scc_info_SetResponse_gNMI_2eproto.base,
  &scc_info_SubscribeRequest_gNMI_2eproto.base,
  &scc_info_SubscribeResponse_gNMI_2eproto.base,
  &scc_info_Subscription_gNMI_2eproto.base,
  &scc_info_SubscriptionList_gNMI_2eproto.base,
  &scc_info_Update_gNMI_2eproto.base,
  &scc_info_UpdateResult_gNMI_2eproto.base,
  &scc_info_Value_gNMI_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gNMI_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gNMI_2eproto = {
  false, false, descriptor_table_protodef_gNMI_2eproto, "gNMI.proto", 3461,
  &descriptor_table_gNMI_2eproto_once, descriptor_table_gNMI_2eproto_sccs, descriptor_table_gNMI_2eproto_deps, 25, 1,
  schemas, file_default_instances, TableStruct_gNMI_2eproto::offsets,
  file_level_metadata_gNMI_2eproto, 26, file_level_enum_descriptors_gNMI_2eproto, file_level_service_descriptors_gNMI_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gNMI_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gNMI_2eproto)), true);
namespace gnmi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionList_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gNMI_2eproto);
  return file_level_enum_descriptors_gNMI_2eproto[0];
}
bool SubscriptionList_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubscriptionList_Mode SubscriptionList::STREAM;
constexpr SubscriptionList_Mode SubscriptionList::ONCE;
constexpr SubscriptionList_Mode SubscriptionList::POLL;
constexpr SubscriptionList_Mode SubscriptionList::Mode_MIN;
constexpr SubscriptionList_Mode SubscriptionList::Mode_MAX;
constexpr int SubscriptionList::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateResult_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gNMI_2eproto);
  return file_level_enum_descriptors_gNMI_2eproto[1];
}
bool UpdateResult_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateResult_Operation UpdateResult::INVALID;
constexpr UpdateResult_Operation UpdateResult::DELETE;
constexpr UpdateResult_Operation UpdateResult::REPLACE;
constexpr UpdateResult_Operation UpdateResult::UPDATE;
constexpr UpdateResult_Operation UpdateResult::Operation_MIN;
constexpr UpdateResult_Operation UpdateResult::Operation_MAX;
constexpr int UpdateResult::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRequest_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gNMI_2eproto);
  return file_level_enum_descriptors_gNMI_2eproto[2];
}
bool GetRequest_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetRequest_DataType GetRequest::ALL;
constexpr GetRequest_DataType GetRequest::CONFIG;
constexpr GetRequest_DataType GetRequest::STATE;
constexpr GetRequest_DataType GetRequest::OPERATIONAL;
constexpr GetRequest_DataType GetRequest::DataType_MIN;
constexpr GetRequest_DataType GetRequest::DataType_MAX;
constexpr int GetRequest::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gNMI_2eproto);
  return file_level_enum_descriptors_gNMI_2eproto[3];
}
bool Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gNMI_2eproto);
  return file_level_enum_descriptors_gNMI_2eproto[4];
}
bool SubscriptionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
  ::gnmi::_Notification_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
}
class Notification::_Internal {
 public:
  static const ::gnmi::Path& prefix(const Notification* msg);
};

const ::gnmi::Path&
Notification::_Internal::prefix(const Notification* msg) {
  return *msg->prefix_;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  update_(arena),
  delete__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      update_(from.update_),
      delete__(from.delete__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&atomic_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(atomic_));
  // @@protoc_insertion_point(copy_constructor:gnmi.Notification)
}

void Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notification_gNMI_2eproto.base);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prefix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomic_) -
      reinterpret_cast<char*>(&prefix_)) + sizeof(atomic_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:gnmi.Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prefix_;
}

void Notification::ArenaDtor(void* object) {
  Notification* _this = reinterpret_cast< Notification* >(object);
  (void)_this;
}
void Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notification& Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notification_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_.Clear();
  delete__.Clear();
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomic_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(atomic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Path prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Notification.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Update update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Path delete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool atomic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          atomic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .gnmi.Path prefix = 2;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefix(this), target, stream);
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Notification.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // repeated .gnmi.Update update = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_update(i), target, stream);
  }

  // repeated .gnmi.Path delete = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_delete_(i), target, stream);
  }

  // bool atomic = 6;
  if (this->atomic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_atomic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Update update = 4;
  total_size += 1UL * this->_internal_update_size();
  for (const auto& msg : this->update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Path delete = 5;
  total_size += 1UL * this->_internal_delete__size();
  for (const auto& msg : this->delete__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .gnmi.Path prefix = 2;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // bool atomic = 6;
  if (this->atomic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_.MergeFrom(from.update_);
  delete__.MergeFrom(from.delete__);
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.atomic() != 0) {
    _internal_set_atomic(from._internal_atomic());
  }
}

void Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  update_.InternalSwap(&other->update_);
  delete__.InternalSwap(&other->delete__);
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, atomic_)
      + sizeof(Notification::atomic_)
      - PROTOBUF_FIELD_OFFSET(Notification, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Update::InitAsDefaultInstance() {
  ::gnmi::_Update_default_instance_._instance.get_mutable()->path_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
  ::gnmi::_Update_default_instance_._instance.get_mutable()->value_ = const_cast< ::gnmi::Value*>(
      ::gnmi::Value::internal_default_instance());
  ::gnmi::_Update_default_instance_._instance.get_mutable()->val_ = const_cast< ::gnmi::TypedValue*>(
      ::gnmi::TypedValue::internal_default_instance());
}
class Update::_Internal {
 public:
  static const ::gnmi::Path& path(const Update* msg);
  static const ::gnmi::Value& value(const Update* msg);
  static const ::gnmi::TypedValue& val(const Update* msg);
};

const ::gnmi::Path&
Update::_Internal::path(const Update* msg) {
  return *msg->path_;
}
const ::gnmi::Value&
Update::_Internal::value(const Update* msg) {
  return *msg->value_;
}
const ::gnmi::TypedValue&
Update::_Internal::val(const Update* msg) {
  return *msg->val_;
}
Update::Update(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::gnmi::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_val()) {
    val_ = new ::gnmi::TypedValue(*from.val_);
  } else {
    val_ = nullptr;
  }
  duplicates_ = from.duplicates_;
  // @@protoc_insertion_point(copy_constructor:gnmi.Update)
}

void Update::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Update_gNMI_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duplicates_) -
      reinterpret_cast<char*>(&path_)) + sizeof(duplicates_));
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:gnmi.Update)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Update::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete val_;
}

void Update::ArenaDtor(void* object) {
  Update* _this = reinterpret_cast< Update* >(object);
  (void)_this;
}
void Update::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Update& Update::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Update_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArena() == nullptr && val_ != nullptr) {
    delete val_;
  }
  val_ = nullptr;
  duplicates_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Value value = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.TypedValue val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duplicates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          duplicates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Update::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // .gnmi.Value value = 2 [deprecated = true];
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // .gnmi.TypedValue val = 3;
  if (this->has_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::val(this), target, stream);
  }

  // uint32 duplicates = 4;
  if (this->duplicates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duplicates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Update)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .gnmi.Value value = 2 [deprecated = true];
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .gnmi.TypedValue val = 3;
  if (this->has_val()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *val_);
  }

  // uint32 duplicates = 4;
  if (this->duplicates() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duplicates());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Update::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Update* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Update)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Update)
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::gnmi::Value::MergeFrom(from._internal_value());
  }
  if (from.has_val()) {
    _internal_mutable_val()->::gnmi::TypedValue::MergeFrom(from._internal_val());
  }
  if (from.duplicates() != 0) {
    _internal_set_duplicates(from._internal_duplicates());
  }
}

void Update::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Update, duplicates_)
      + sizeof(Update::duplicates_)
      - PROTOBUF_FIELD_OFFSET(Update, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TypedValue::InitAsDefaultInstance() {
  ::gnmi::_TypedValue_default_instance_.string_val_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::gnmi::_TypedValue_default_instance_.int_val_ = PROTOBUF_LONGLONG(0);
  ::gnmi::_TypedValue_default_instance_.uint_val_ = PROTOBUF_ULONGLONG(0);
  ::gnmi::_TypedValue_default_instance_.bool_val_ = false;
  ::gnmi::_TypedValue_default_instance_.bytes_val_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::gnmi::_TypedValue_default_instance_.float_val_ = 0;
  ::gnmi::_TypedValue_default_instance_.decimal_val_ = const_cast< ::gnmi::Decimal64*>(
      ::gnmi::Decimal64::internal_default_instance());
  ::gnmi::_TypedValue_default_instance_.leaflist_val_ = const_cast< ::gnmi::ScalarArray*>(
      ::gnmi::ScalarArray::internal_default_instance());
  ::gnmi::_TypedValue_default_instance_.any_val_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gnmi::_TypedValue_default_instance_.json_val_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::gnmi::_TypedValue_default_instance_.json_ietf_val_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::gnmi::_TypedValue_default_instance_.ascii_val_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::gnmi::_TypedValue_default_instance_.proto_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TypedValue::_Internal {
 public:
  static const ::gnmi::Decimal64& decimal_val(const TypedValue* msg);
  static const ::gnmi::ScalarArray& leaflist_val(const TypedValue* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& any_val(const TypedValue* msg);
};

const ::gnmi::Decimal64&
TypedValue::_Internal::decimal_val(const TypedValue* msg) {
  return *msg->value_.decimal_val_;
}
const ::gnmi::ScalarArray&
TypedValue::_Internal::leaflist_val(const TypedValue* msg) {
  return *msg->value_.leaflist_val_;
}
const PROTOBUF_NAMESPACE_ID::Any&
TypedValue::_Internal::any_val(const TypedValue* msg) {
  return *msg->value_.any_val_;
}
void TypedValue::set_allocated_decimal_val(::gnmi::Decimal64* decimal_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (decimal_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimal_val);
    if (message_arena != submessage_arena) {
      decimal_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal_val, submessage_arena);
    }
    set_has_decimal_val();
    value_.decimal_val_ = decimal_val;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.decimal_val)
}
void TypedValue::set_allocated_leaflist_val(::gnmi::ScalarArray* leaflist_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (leaflist_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaflist_val);
    if (message_arena != submessage_arena) {
      leaflist_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaflist_val, submessage_arena);
    }
    set_has_leaflist_val();
    value_.leaflist_val_ = leaflist_val;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.leaflist_val)
}
void TypedValue::set_allocated_any_val(PROTOBUF_NAMESPACE_ID::Any* any_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (any_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_val)->GetArena();
    if (message_arena != submessage_arena) {
      any_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_val, submessage_arena);
    }
    set_has_any_val();
    value_.any_val_ = any_val;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.any_val)
}
void TypedValue::clear_any_val() {
  if (_internal_has_any_val()) {
    if (GetArena() == nullptr) {
      delete value_.any_val_;
    }
    clear_has_value();
  }
}
TypedValue::TypedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.TypedValue)
}
TypedValue::TypedValue(const TypedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringVal: {
      _internal_set_string_val(from._internal_string_val());
      break;
    }
    case kIntVal: {
      _internal_set_int_val(from._internal_int_val());
      break;
    }
    case kUintVal: {
      _internal_set_uint_val(from._internal_uint_val());
      break;
    }
    case kBoolVal: {
      _internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kBytesVal: {
      _internal_set_bytes_val(from._internal_bytes_val());
      break;
    }
    case kFloatVal: {
      _internal_set_float_val(from._internal_float_val());
      break;
    }
    case kDecimalVal: {
      _internal_mutable_decimal_val()->::gnmi::Decimal64::MergeFrom(from._internal_decimal_val());
      break;
    }
    case kLeaflistVal: {
      _internal_mutable_leaflist_val()->::gnmi::ScalarArray::MergeFrom(from._internal_leaflist_val());
      break;
    }
    case kAnyVal: {
      _internal_mutable_any_val()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any_val());
      break;
    }
    case kJsonVal: {
      _internal_set_json_val(from._internal_json_val());
      break;
    }
    case kJsonIetfVal: {
      _internal_set_json_ietf_val(from._internal_json_ietf_val());
      break;
    }
    case kAsciiVal: {
      _internal_set_ascii_val(from._internal_ascii_val());
      break;
    }
    case kProtoBytes: {
      _internal_set_proto_bytes(from._internal_proto_bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.TypedValue)
}

void TypedValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarArray_gNMI_2eproto.base);
  clear_has_value();
}

TypedValue::~TypedValue() {
  // @@protoc_insertion_point(destructor:gnmi.TypedValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TypedValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void TypedValue::ArenaDtor(void* object) {
  TypedValue* _this = reinterpret_cast< TypedValue* >(object);
  (void)_this;
}
void TypedValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypedValue& TypedValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarArray_gNMI_2eproto.base);
  return *internal_default_instance();
}


void TypedValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:gnmi.TypedValue)
  switch (value_case()) {
    case kStringVal: {
      value_.string_val_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kIntVal: {
      // No need to clear
      break;
    }
    case kUintVal: {
      // No need to clear
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case kBytesVal: {
      value_.bytes_val_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kDecimalVal: {
      if (GetArena() == nullptr) {
        delete value_.decimal_val_;
      }
      break;
    }
    case kLeaflistVal: {
      if (GetArena() == nullptr) {
        delete value_.leaflist_val_;
      }
      break;
    }
    case kAnyVal: {
      if (GetArena() == nullptr) {
        delete value_.any_val_;
      }
      break;
    }
    case kJsonVal: {
      value_.json_val_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kJsonIetfVal: {
      value_.json_ietf_val_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kAsciiVal: {
      value_.ascii_val_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kProtoBytes: {
      value_.proto_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TypedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.TypedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypedValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string string_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.TypedValue.string_val"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_uint_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytes_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bytes_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_val = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _internal_set_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .gnmi.Decimal64 decimal_val = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.ScalarArray leaflist_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaflist_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any any_val = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes json_val = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_json_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes json_ietf_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_json_ietf_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ascii_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_ascii_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.TypedValue.ascii_val"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proto_bytes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_proto_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypedValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.TypedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_val = 1;
  if (_internal_has_string_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.TypedValue.string_val");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_val(), target);
  }

  // int64 int_val = 2;
  if (_internal_has_int_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int_val(), target);
  }

  // uint64 uint_val = 3;
  if (_internal_has_uint_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uint_val(), target);
  }

  // bool bool_val = 4;
  if (_internal_has_bool_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_val(), target);
  }

  // bytes bytes_val = 5;
  if (_internal_has_bytes_val()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bytes_val(), target);
  }

  // float float_val = 6;
  if (_internal_has_float_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_float_val(), target);
  }

  // .gnmi.Decimal64 decimal_val = 7;
  if (_internal_has_decimal_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::decimal_val(this), target, stream);
  }

  // .gnmi.ScalarArray leaflist_val = 8;
  if (_internal_has_leaflist_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leaflist_val(this), target, stream);
  }

  // .google.protobuf.Any any_val = 9;
  if (_internal_has_any_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::any_val(this), target, stream);
  }

  // bytes json_val = 10;
  if (_internal_has_json_val()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_json_val(), target);
  }

  // bytes json_ietf_val = 11;
  if (_internal_has_json_ietf_val()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_json_ietf_val(), target);
  }

  // string ascii_val = 12;
  if (_internal_has_ascii_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ascii_val().data(), static_cast<int>(this->_internal_ascii_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.TypedValue.ascii_val");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_ascii_val(), target);
  }

  // bytes proto_bytes = 13;
  if (_internal_has_proto_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_proto_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.TypedValue)
  return target;
}

size_t TypedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.TypedValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_val = 1;
    case kStringVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
      break;
    }
    // int64 int_val = 2;
    case kIntVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int_val());
      break;
    }
    // uint64 uint_val = 3;
    case kUintVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint_val());
      break;
    }
    // bool bool_val = 4;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    // bytes bytes_val = 5;
    case kBytesVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_val());
      break;
    }
    // float float_val = 6;
    case kFloatVal: {
      total_size += 1 + 4;
      break;
    }
    // .gnmi.Decimal64 decimal_val = 7;
    case kDecimalVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.decimal_val_);
      break;
    }
    // .gnmi.ScalarArray leaflist_val = 8;
    case kLeaflistVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.leaflist_val_);
      break;
    }
    // .google.protobuf.Any any_val = 9;
    case kAnyVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.any_val_);
      break;
    }
    // bytes json_val = 10;
    case kJsonVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_json_val());
      break;
    }
    // bytes json_ietf_val = 11;
    case kJsonIetfVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_json_ietf_val());
      break;
    }
    // string ascii_val = 12;
    case kAsciiVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ascii_val());
      break;
    }
    // bytes proto_bytes = 13;
    case kProtoBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypedValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.TypedValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TypedValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TypedValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.TypedValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.TypedValue)
    MergeFrom(*source);
  }
}

void TypedValue::MergeFrom(const TypedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.TypedValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringVal: {
      _internal_set_string_val(from._internal_string_val());
      break;
    }
    case kIntVal: {
      _internal_set_int_val(from._internal_int_val());
      break;
    }
    case kUintVal: {
      _internal_set_uint_val(from._internal_uint_val());
      break;
    }
    case kBoolVal: {
      _internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kBytesVal: {
      _internal_set_bytes_val(from._internal_bytes_val());
      break;
    }
    case kFloatVal: {
      _internal_set_float_val(from._internal_float_val());
      break;
    }
    case kDecimalVal: {
      _internal_mutable_decimal_val()->::gnmi::Decimal64::MergeFrom(from._internal_decimal_val());
      break;
    }
    case kLeaflistVal: {
      _internal_mutable_leaflist_val()->::gnmi::ScalarArray::MergeFrom(from._internal_leaflist_val());
      break;
    }
    case kAnyVal: {
      _internal_mutable_any_val()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any_val());
      break;
    }
    case kJsonVal: {
      _internal_set_json_val(from._internal_json_val());
      break;
    }
    case kJsonIetfVal: {
      _internal_set_json_ietf_val(from._internal_json_ietf_val());
      break;
    }
    case kAsciiVal: {
      _internal_set_ascii_val(from._internal_ascii_val());
      break;
    }
    case kProtoBytes: {
      _internal_set_proto_bytes(from._internal_proto_bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void TypedValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.TypedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypedValue::CopyFrom(const TypedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.TypedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypedValue::IsInitialized() const {
  return true;
}

void TypedValue::InternalSwap(TypedValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypedValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena),
  elem_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_),
      elem_(from.elem_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_origin().empty()) {
    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origin(),
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_gNMI_2eproto.base);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:gnmi.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  elem_.Clear();
  origin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string element = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_element();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Path.element"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Path.origin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.PathElem elem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Path.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string element = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    const auto& s = this->_internal_element(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Path.element");
    target = stream->WriteString(1, s, target);
  }

  // string origin = 2;
  if (this->origin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Path.origin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // repeated .gnmi.PathElem elem = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_elem(i), target, stream);
  }

  // string target = 4;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Path.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string element = 1 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(element_.size());
  for (int i = 0, n = element_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      element_.Get(i));
  }

  // repeated .gnmi.PathElem elem = 3;
  total_size += 1UL * this->_internal_elem_size();
  for (const auto& msg : this->elem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string origin = 2;
  if (this->origin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin());
  }

  // string target = 4;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  elem_.MergeFrom(from.elem_);
  if (from.origin().size() > 0) {
    _internal_set_origin(from._internal_origin());
  }
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
  elem_.InternalSwap(&other->elem_);
  origin_.Swap(&other->origin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse() {}
PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PathElem_KeyEntry_DoNotUse::MergeFrom(const PathElem_KeyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PathElem_KeyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PathElem_KeyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PathElem::InitAsDefaultInstance() {
}
class PathElem::_Internal {
 public:
};

PathElem::PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.PathElem)
}
PathElem::PathElem(const PathElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.MergeFrom(from.key_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.PathElem)
}

void PathElem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathElem_gNMI_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PathElem::~PathElem() {
  // @@protoc_insertion_point(destructor:gnmi.PathElem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathElem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathElem::ArenaDtor(void* object) {
  PathElem* _this = reinterpret_cast< PathElem* >(object);
  (void)_this;
}
void PathElem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathElem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathElem& PathElem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathElem_gNMI_2eproto.base);
  return *internal_default_instance();
}


void PathElem::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.PathElem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathElem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.PathElem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&key_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathElem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.PathElem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.PathElem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> key = 2;
  if (!this->_internal_key().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "gnmi.PathElem.KeyEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "gnmi.PathElem.KeyEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_key().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_key().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_key().begin();
          it != this->_internal_key().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PathElem_KeyEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_key().begin();
          it != this->_internal_key().end(); ++it) {
        target = PathElem_KeyEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.PathElem)
  return target;
}

size_t PathElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.PathElem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_key_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_key().begin();
      it != this->_internal_key().end(); ++it) {
    total_size += PathElem_KeyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathElem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.PathElem)
  GOOGLE_DCHECK_NE(&from, this);
  const PathElem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathElem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.PathElem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.PathElem)
    MergeFrom(*source);
  }
}

void PathElem::MergeFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.PathElem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void PathElem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.PathElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathElem::CopyFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.PathElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathElem::IsInitialized() const {
  return true;
}

void PathElem::InternalSwap(PathElem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PathElem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Value::InitAsDefaultInstance() {
}
class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gnmi.Value)
}

void Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Value_gNMI_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:gnmi.Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Value_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Encoding type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gnmi::Encoding>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .gnmi.Encoding type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .gnmi.Encoding type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Error::InitAsDefaultInstance() {
  ::gnmi::_Error_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Error::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const Error* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Error::_Internal::data(const Error* msg) {
  return *msg->data_;
}
void Error::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:gnmi.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_gNMI_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&data_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:gnmi.Error)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Error.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, code_)
      + sizeof(Error::code_)
      - PROTOBUF_FIELD_OFFSET(Error, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decimal64::InitAsDefaultInstance() {
}
class Decimal64::_Internal {
 public:
};

Decimal64::Decimal64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Decimal64)
}
Decimal64::Decimal64(const Decimal64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&digits_, &from.digits_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&digits_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:gnmi.Decimal64)
}

void Decimal64::SharedCtor() {
  ::memset(&digits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&digits_)) + sizeof(precision_));
}

Decimal64::~Decimal64() {
  // @@protoc_insertion_point(destructor:gnmi.Decimal64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Decimal64::ArenaDtor(void* object) {
  Decimal64* _this = reinterpret_cast< Decimal64* >(object);
  (void)_this;
}
void Decimal64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal64& Decimal64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal64_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Decimal64::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Decimal64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&digits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&digits_)) + sizeof(precision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 digits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Decimal64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 digits = 1;
  if (this->digits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_digits(), target);
  }

  // uint32 precision = 2;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Decimal64)
  return target;
}

size_t Decimal64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Decimal64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 digits = 1;
  if (this->digits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_digits());
  }

  // uint32 precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Decimal64)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Decimal64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Decimal64)
    MergeFrom(*source);
  }
}

void Decimal64::MergeFrom(const Decimal64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Decimal64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.digits() != 0) {
    _internal_set_digits(from._internal_digits());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void Decimal64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Decimal64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal64::CopyFrom(const Decimal64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Decimal64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal64::IsInitialized() const {
  return true;
}

void Decimal64::InternalSwap(Decimal64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal64, precision_)
      + sizeof(Decimal64::precision_)
      - PROTOBUF_FIELD_OFFSET(Decimal64, digits_)>(
          reinterpret_cast<char*>(&digits_),
          reinterpret_cast<char*>(&other->digits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScalarArray::InitAsDefaultInstance() {
}
class ScalarArray::_Internal {
 public:
};

ScalarArray::ScalarArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.ScalarArray)
}
ScalarArray::ScalarArray(const ScalarArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.ScalarArray)
}

void ScalarArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarArray_gNMI_2eproto.base);
}

ScalarArray::~ScalarArray() {
  // @@protoc_insertion_point(destructor:gnmi.ScalarArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScalarArray::ArenaDtor(void* object) {
  ScalarArray* _this = reinterpret_cast< ScalarArray* >(object);
  (void)_this;
}
void ScalarArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarArray& ScalarArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarArray_gNMI_2eproto.base);
  return *internal_default_instance();
}


void ScalarArray::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.ScalarArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gnmi.TypedValue element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.ScalarArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.TypedValue element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.ScalarArray)
  return target;
}

size_t ScalarArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.ScalarArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.TypedValue element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.ScalarArray)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.ScalarArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.ScalarArray)
    MergeFrom(*source);
  }
}

void ScalarArray::MergeFrom(const ScalarArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.ScalarArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void ScalarArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.ScalarArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarArray::CopyFrom(const ScalarArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.ScalarArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarArray::IsInitialized() const {
  return true;
}

void ScalarArray::InternalSwap(ScalarArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::gnmi::_SubscribeRequest_default_instance_.subscribe_ = const_cast< ::gnmi::SubscriptionList*>(
      ::gnmi::SubscriptionList::internal_default_instance());
  ::gnmi::_SubscribeRequest_default_instance_.poll_ = const_cast< ::gnmi::Poll*>(
      ::gnmi::Poll::internal_default_instance());
  ::gnmi::_SubscribeRequest_default_instance_.aliases_ = const_cast< ::gnmi::AliasList*>(
      ::gnmi::AliasList::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  static const ::gnmi::SubscriptionList& subscribe(const SubscribeRequest* msg);
  static const ::gnmi::Poll& poll(const SubscribeRequest* msg);
  static const ::gnmi::AliasList& aliases(const SubscribeRequest* msg);
};

const ::gnmi::SubscriptionList&
SubscribeRequest::_Internal::subscribe(const SubscribeRequest* msg) {
  return *msg->request_.subscribe_;
}
const ::gnmi::Poll&
SubscribeRequest::_Internal::poll(const SubscribeRequest* msg) {
  return *msg->request_.poll_;
}
const ::gnmi::AliasList&
SubscribeRequest::_Internal::aliases(const SubscribeRequest* msg) {
  return *msg->request_.aliases_;
}
void SubscribeRequest::set_allocated_subscribe(::gnmi::SubscriptionList* subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscribe);
    if (message_arena != submessage_arena) {
      subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    set_has_subscribe();
    request_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeRequest.subscribe)
}
void SubscribeRequest::set_allocated_poll(::gnmi::Poll* poll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (poll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(poll);
    if (message_arena != submessage_arena) {
      poll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll, submessage_arena);
    }
    set_has_poll();
    request_.poll_ = poll;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeRequest.poll)
}
void SubscribeRequest::set_allocated_aliases(::gnmi::AliasList* aliases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (aliases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aliases);
    if (message_arena != submessage_arena) {
      aliases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aliases, submessage_arena);
    }
    set_has_aliases();
    request_.aliases_ = aliases;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeRequest.aliases)
}
SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSubscribe: {
      _internal_mutable_subscribe()->::gnmi::SubscriptionList::MergeFrom(from._internal_subscribe());
      break;
    }
    case kPoll: {
      _internal_mutable_poll()->::gnmi::Poll::MergeFrom(from._internal_poll());
      break;
    }
    case kAliases: {
      _internal_mutable_aliases()->::gnmi::AliasList::MergeFrom(from._internal_aliases());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_gNMI_2eproto.base);
  clear_has_request();
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:gnmi.SubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_gNMI_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:gnmi.SubscribeRequest)
  switch (request_case()) {
    case kSubscribe: {
      if (GetArena() == nullptr) {
        delete request_.subscribe_;
      }
      break;
    }
    case kPoll: {
      if (GetArena() == nullptr) {
        delete request_.poll_;
      }
      break;
    }
    case kAliases: {
      if (GetArena() == nullptr) {
        delete request_.aliases_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.SubscriptionList subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Poll poll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.AliasList aliases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aliases(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.SubscriptionList subscribe = 1;
  if (_internal_has_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscribe(this), target, stream);
  }

  // .gnmi.Poll poll = 3;
  if (_internal_has_poll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::poll(this), target, stream);
  }

  // .gnmi.AliasList aliases = 4;
  if (_internal_has_aliases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aliases(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .gnmi.SubscriptionList subscribe = 1;
    case kSubscribe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.subscribe_);
      break;
    }
    // .gnmi.Poll poll = 3;
    case kPoll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.poll_);
      break;
    }
    // .gnmi.AliasList aliases = 4;
    case kAliases: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.aliases_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kSubscribe: {
      _internal_mutable_subscribe()->::gnmi::SubscriptionList::MergeFrom(from._internal_subscribe());
      break;
    }
    case kPoll: {
      _internal_mutable_poll()->::gnmi::Poll::MergeFrom(from._internal_poll());
      break;
    }
    case kAliases: {
      _internal_mutable_aliases()->::gnmi::AliasList::MergeFrom(from._internal_aliases());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Poll::InitAsDefaultInstance() {
}
class Poll::_Internal {
 public:
};

Poll::Poll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Poll)
}
Poll::Poll(const Poll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.Poll)
}

void Poll::SharedCtor() {
}

Poll::~Poll() {
  // @@protoc_insertion_point(destructor:gnmi.Poll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Poll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Poll::ArenaDtor(void* object) {
  Poll* _this = reinterpret_cast< Poll* >(object);
  (void)_this;
}
void Poll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Poll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Poll& Poll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Poll_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Poll::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Poll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Poll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Poll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Poll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Poll)
  return target;
}

size_t Poll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Poll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Poll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Poll)
  GOOGLE_DCHECK_NE(&from, this);
  const Poll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Poll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Poll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Poll)
    MergeFrom(*source);
  }
}

void Poll::MergeFrom(const Poll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Poll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Poll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Poll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Poll::CopyFrom(const Poll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Poll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poll::IsInitialized() const {
  return true;
}

void Poll::InternalSwap(Poll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Poll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResponse::InitAsDefaultInstance() {
  ::gnmi::_SubscribeResponse_default_instance_.update_ = const_cast< ::gnmi::Notification*>(
      ::gnmi::Notification::internal_default_instance());
  ::gnmi::_SubscribeResponse_default_instance_.sync_response_ = false;
  ::gnmi::_SubscribeResponse_default_instance_.error_ = const_cast< ::gnmi::Error*>(
      ::gnmi::Error::internal_default_instance());
}
class SubscribeResponse::_Internal {
 public:
  static const ::gnmi::Notification& update(const SubscribeResponse* msg);
  static const ::gnmi::Error& error(const SubscribeResponse* msg);
};

const ::gnmi::Notification&
SubscribeResponse::_Internal::update(const SubscribeResponse* msg) {
  return *msg->response_.update_;
}
const ::gnmi::Error&
SubscribeResponse::_Internal::error(const SubscribeResponse* msg) {
  return *msg->response_.error_;
}
void SubscribeResponse::set_allocated_update(::gnmi::Notification* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    response_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeResponse.update)
}
void SubscribeResponse::set_allocated_error(::gnmi::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeResponse.error)
}
SubscribeResponse::SubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kUpdate: {
      _internal_mutable_update()->::gnmi::Notification::MergeFrom(from._internal_update());
      break;
    }
    case kSyncResponse: {
      _internal_set_sync_response(from._internal_sync_response());
      break;
    }
    case kError: {
      _internal_mutable_error()->::gnmi::Error::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResponse_gNMI_2eproto.base);
  clear_has_response();
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:gnmi.SubscribeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void SubscribeResponse::ArenaDtor(void* object) {
  SubscribeResponse* _this = reinterpret_cast< SubscribeResponse* >(object);
  (void)_this;
}
void SubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResponse& SubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResponse_gNMI_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:gnmi.SubscribeResponse)
  switch (response_case()) {
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete response_.update_;
      }
      break;
    }
    case kSyncResponse: {
      // No need to clear
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Notification update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sync_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_sync_response(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Error error = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Notification update = 1;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::update(this), target, stream);
  }

  // bool sync_response = 3;
  if (_internal_has_sync_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sync_response(), target);
  }

  // .gnmi.Error error = 4 [deprecated = true];
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .gnmi.Notification update = 1;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.update_);
      break;
    }
    // bool sync_response = 3;
    case kSyncResponse: {
      total_size += 1 + 1;
      break;
    }
    // .gnmi.Error error = 4 [deprecated = true];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.SubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.SubscribeResponse)
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kUpdate: {
      _internal_mutable_update()->::gnmi::Notification::MergeFrom(from._internal_update());
      break;
    }
    case kSyncResponse: {
      _internal_set_sync_response(from._internal_sync_response());
      break;
    }
    case kError: {
      _internal_mutable_error()->::gnmi::Error::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void SubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionList::InitAsDefaultInstance() {
  ::gnmi::_SubscriptionList_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
  ::gnmi::_SubscriptionList_default_instance_._instance.get_mutable()->qos_ = const_cast< ::gnmi::QOSMarking*>(
      ::gnmi::QOSMarking::internal_default_instance());
}
class SubscriptionList::_Internal {
 public:
  static const ::gnmi::Path& prefix(const SubscriptionList* msg);
  static const ::gnmi::QOSMarking& qos(const SubscriptionList* msg);
};

const ::gnmi::Path&
SubscriptionList::_Internal::prefix(const SubscriptionList* msg) {
  return *msg->prefix_;
}
const ::gnmi::QOSMarking&
SubscriptionList::_Internal::qos(const SubscriptionList* msg) {
  return *msg->qos_;
}
SubscriptionList::SubscriptionList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subscription_(arena),
  use_models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.SubscriptionList)
}
SubscriptionList::SubscriptionList(const SubscriptionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subscription_(from.subscription_),
      use_models_(from.use_models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_qos()) {
    qos_ = new ::gnmi::QOSMarking(*from.qos_);
  } else {
    qos_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:gnmi.SubscriptionList)
}

void SubscriptionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionList_gNMI_2eproto.base);
  ::memset(&prefix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&prefix_)) + sizeof(encoding_));
}

SubscriptionList::~SubscriptionList() {
  // @@protoc_insertion_point(destructor:gnmi.SubscriptionList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriptionList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete qos_;
}

void SubscriptionList::ArenaDtor(void* object) {
  SubscriptionList* _this = reinterpret_cast< SubscriptionList* >(object);
  (void)_this;
}
void SubscriptionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionList& SubscriptionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionList_gNMI_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionList::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SubscriptionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.Clear();
  use_models_.Clear();
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArena() == nullptr && qos_ != nullptr) {
    delete qos_;
  }
  qos_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Subscription subscription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscription(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool use_aliases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_aliases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.QOSMarking qos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.SubscriptionList.Mode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::gnmi::SubscriptionList_Mode>(val));
        } else goto handle_unusual;
        continue;
      // bool allow_aggregation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          allow_aggregation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.ModelData use_models = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_use_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .gnmi.Encoding encoding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::gnmi::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // bool updates_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          updates_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SubscriptionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Subscription subscription = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscription_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subscription(i), target, stream);
  }

  // bool use_aliases = 3;
  if (this->use_aliases() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_aliases(), target);
  }

  // .gnmi.QOSMarking qos = 4;
  if (this->has_qos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::qos(this), target, stream);
  }

  // .gnmi.SubscriptionList.Mode mode = 5;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mode(), target);
  }

  // bool allow_aggregation = 6;
  if (this->allow_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_allow_aggregation(), target);
  }

  // repeated .gnmi.ModelData use_models = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_use_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_use_models(i), target, stream);
  }

  // .gnmi.Encoding encoding = 8;
  if (this->encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_encoding(), target);
  }

  // bool updates_only = 9;
  if (this->updates_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_updates_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SubscriptionList)
  return target;
}

size_t SubscriptionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SubscriptionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Subscription subscription = 2;
  total_size += 1UL * this->_internal_subscription_size();
  for (const auto& msg : this->subscription_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.ModelData use_models = 7;
  total_size += 1UL * this->_internal_use_models_size();
  for (const auto& msg : this->use_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .gnmi.QOSMarking qos = 4;
  if (this->has_qos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qos_);
  }

  // .gnmi.SubscriptionList.Mode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool use_aliases = 3;
  if (this->use_aliases() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_aggregation = 6;
  if (this->allow_aggregation() != 0) {
    total_size += 1 + 1;
  }

  // bool updates_only = 9;
  if (this->updates_only() != 0) {
    total_size += 1 + 1;
  }

  // .gnmi.Encoding encoding = 8;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.SubscriptionList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.SubscriptionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.SubscriptionList)
    MergeFrom(*source);
  }
}

void SubscriptionList::MergeFrom(const SubscriptionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SubscriptionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscription_.MergeFrom(from.subscription_);
  use_models_.MergeFrom(from.use_models_);
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from.has_qos()) {
    _internal_mutable_qos()->::gnmi::QOSMarking::MergeFrom(from._internal_qos());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.use_aliases() != 0) {
    _internal_set_use_aliases(from._internal_use_aliases());
  }
  if (from.allow_aggregation() != 0) {
    _internal_set_allow_aggregation(from._internal_allow_aggregation());
  }
  if (from.updates_only() != 0) {
    _internal_set_updates_only(from._internal_updates_only());
  }
  if (from.encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
}

void SubscriptionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.SubscriptionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionList::CopyFrom(const SubscriptionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SubscriptionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionList::IsInitialized() const {
  return true;
}

void SubscriptionList::InternalSwap(SubscriptionList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subscription_.InternalSwap(&other->subscription_);
  use_models_.InternalSwap(&other->use_models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionList, encoding_)
      + sizeof(SubscriptionList::encoding_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionList, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Subscription::InitAsDefaultInstance() {
  ::gnmi::_Subscription_default_instance_._instance.get_mutable()->path_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
}
class Subscription::_Internal {
 public:
  static const ::gnmi::Path& path(const Subscription* msg);
};

const ::gnmi::Path&
Subscription::_Internal::path(const Subscription* msg) {
  return *msg->path_;
}
Subscription::Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  ::memcpy(&sample_interval_, &from.sample_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_) -
    reinterpret_cast<char*>(&sample_interval_)) + sizeof(heartbeat_interval_));
  // @@protoc_insertion_point(copy_constructor:gnmi.Subscription)
}

void Subscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subscription_gNMI_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&path_)) + sizeof(heartbeat_interval_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:gnmi.Subscription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subscription& Subscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subscription_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  ::memset(&sample_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&sample_interval_)) + sizeof(heartbeat_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.SubscriptionMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::gnmi::SubscriptionMode>(val));
        } else goto handle_unusual;
        continue;
      // uint64 sample_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sample_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool suppress_redundant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          suppress_redundant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 heartbeat_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          heartbeat_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // .gnmi.SubscriptionMode mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // uint64 sample_interval = 3;
  if (this->sample_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sample_interval(), target);
  }

  // bool suppress_redundant = 4;
  if (this->suppress_redundant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_suppress_redundant(), target);
  }

  // uint64 heartbeat_interval = 5;
  if (this->heartbeat_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_heartbeat_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Subscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // uint64 sample_interval = 3;
  if (this->sample_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sample_interval());
  }

  // .gnmi.SubscriptionMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool suppress_redundant = 4;
  if (this->suppress_redundant() != 0) {
    total_size += 1 + 1;
  }

  // uint64 heartbeat_interval = 5;
  if (this->heartbeat_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_heartbeat_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Subscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Subscription)
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
  if (from.sample_interval() != 0) {
    _internal_set_sample_interval(from._internal_sample_interval());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.suppress_redundant() != 0) {
    _internal_set_suppress_redundant(from._internal_suppress_redundant());
  }
  if (from.heartbeat_interval() != 0) {
    _internal_set_heartbeat_interval(from._internal_heartbeat_interval());
  }
}

void Subscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subscription, heartbeat_interval_)
      + sizeof(Subscription::heartbeat_interval_)
      - PROTOBUF_FIELD_OFFSET(Subscription, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QOSMarking::InitAsDefaultInstance() {
}
class QOSMarking::_Internal {
 public:
};

QOSMarking::QOSMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.QOSMarking)
}
QOSMarking::QOSMarking(const QOSMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marking_ = from.marking_;
  // @@protoc_insertion_point(copy_constructor:gnmi.QOSMarking)
}

void QOSMarking::SharedCtor() {
  marking_ = 0u;
}

QOSMarking::~QOSMarking() {
  // @@protoc_insertion_point(destructor:gnmi.QOSMarking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QOSMarking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QOSMarking::ArenaDtor(void* object) {
  QOSMarking* _this = reinterpret_cast< QOSMarking* >(object);
  (void)_this;
}
void QOSMarking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QOSMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QOSMarking& QOSMarking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QOSMarking_gNMI_2eproto.base);
  return *internal_default_instance();
}


void QOSMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.QOSMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marking_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QOSMarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 marking = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          marking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QOSMarking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.QOSMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 marking = 1;
  if (this->marking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_marking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.QOSMarking)
  return target;
}

size_t QOSMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.QOSMarking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 marking = 1;
  if (this->marking() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_marking());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QOSMarking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.QOSMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const QOSMarking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QOSMarking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.QOSMarking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.QOSMarking)
    MergeFrom(*source);
  }
}

void QOSMarking::MergeFrom(const QOSMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.QOSMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marking() != 0) {
    _internal_set_marking(from._internal_marking());
  }
}

void QOSMarking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.QOSMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QOSMarking::CopyFrom(const QOSMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.QOSMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QOSMarking::IsInitialized() const {
  return true;
}

void QOSMarking::InternalSwap(QOSMarking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(marking_, other->marking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QOSMarking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Alias::InitAsDefaultInstance() {
  ::gnmi::_Alias_default_instance_._instance.get_mutable()->path_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
}
class Alias::_Internal {
 public:
  static const ::gnmi::Path& path(const Alias* msg);
};

const ::gnmi::Path&
Alias::_Internal::path(const Alias* msg) {
  return *msg->path_;
}
Alias::Alias(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.Alias)
}
Alias::Alias(const Alias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.Alias)
}

void Alias::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Alias_gNMI_2eproto.base);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_ = nullptr;
}

Alias::~Alias() {
  // @@protoc_insertion_point(destructor:gnmi.Alias)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Alias::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void Alias::ArenaDtor(void* object) {
  Alias* _this = reinterpret_cast< Alias* >(object);
  (void)_this;
}
void Alias::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alias& Alias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alias_gNMI_2eproto.base);
  return *internal_default_instance();
}


void Alias::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Alias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Alias.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Alias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Alias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Alias.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Alias)
  return target;
}

size_t Alias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Alias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .gnmi.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.Alias)
  GOOGLE_DCHECK_NE(&from, this);
  const Alias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Alias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.Alias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.Alias)
    MergeFrom(*source);
  }
}

void Alias::MergeFrom(const Alias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Alias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
}

void Alias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.Alias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alias::CopyFrom(const Alias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Alias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alias::IsInitialized() const {
  return true;
}

void Alias::InternalSwap(Alias* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(path_, other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Alias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AliasList::InitAsDefaultInstance() {
}
class AliasList::_Internal {
 public:
};

AliasList::AliasList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alias_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.AliasList)
}
AliasList::AliasList(const AliasList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alias_(from.alias_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.AliasList)
}

void AliasList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AliasList_gNMI_2eproto.base);
}

AliasList::~AliasList() {
  // @@protoc_insertion_point(destructor:gnmi.AliasList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AliasList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AliasList::ArenaDtor(void* object) {
  AliasList* _this = reinterpret_cast< AliasList* >(object);
  (void)_this;
}
void AliasList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AliasList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AliasList& AliasList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AliasList_gNMI_2eproto.base);
  return *internal_default_instance();
}


void AliasList::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.AliasList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alias_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AliasList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gnmi.Alias alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alias(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AliasList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.AliasList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.Alias alias = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alias_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alias(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.AliasList)
  return target;
}

size_t AliasList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.AliasList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Alias alias = 1;
  total_size += 1UL * this->_internal_alias_size();
  for (const auto& msg : this->alias_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AliasList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.AliasList)
  GOOGLE_DCHECK_NE(&from, this);
  const AliasList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AliasList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.AliasList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.AliasList)
    MergeFrom(*source);
  }
}

void AliasList::MergeFrom(const AliasList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.AliasList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alias_.MergeFrom(from.alias_);
}

void AliasList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.AliasList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliasList::CopyFrom(const AliasList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.AliasList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliasList::IsInitialized() const {
  return true;
}

void AliasList::InternalSwap(AliasList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alias_.InternalSwap(&other->alias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AliasList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRequest::InitAsDefaultInstance() {
  ::gnmi::_SetRequest_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
}
class SetRequest::_Internal {
 public:
  static const ::gnmi::Path& prefix(const SetRequest* msg);
};

const ::gnmi::Path&
SetRequest::_Internal::prefix(const SetRequest* msg) {
  return *msg->prefix_;
}
SetRequest::SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delete__(arena),
  replace_(arena),
  update_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.SetRequest)
}
SetRequest::SetRequest(const SetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delete__(from.delete__),
      replace_(from.replace_),
      update_(from.update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.SetRequest)
}

void SetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRequest_gNMI_2eproto.base);
  prefix_ = nullptr;
}

SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:gnmi.SetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
}

void SetRequest::ArenaDtor(void* object) {
  SetRequest* _this = reinterpret_cast< SetRequest* >(object);
  (void)_this;
}
void SetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRequest& SetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRequest_gNMI_2eproto.base);
  return *internal_default_instance();
}


void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delete__.Clear();
  replace_.Clear();
  update_.Clear();
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Path delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Update replace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Update update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Path delete = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_delete_(i), target, stream);
  }

  // repeated .gnmi.Update replace = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_replace(i), target, stream);
  }

  // repeated .gnmi.Update update = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_update(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SetRequest)
  return target;
}

size_t SetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Path delete = 2;
  total_size += 1UL * this->_internal_delete__size();
  for (const auto& msg : this->delete__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Update replace = 3;
  total_size += 1UL * this->_internal_replace_size();
  for (const auto& msg : this->replace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Update update = 4;
  total_size += 1UL * this->_internal_update_size();
  for (const auto& msg : this->update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.SetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.SetRequest)
    MergeFrom(*source);
  }
}

void SetRequest::MergeFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delete__.MergeFrom(from.delete__);
  replace_.MergeFrom(from.replace_);
  update_.MergeFrom(from.update_);
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
}

void SetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRequest::IsInitialized() const {
  return true;
}

void SetRequest::InternalSwap(SetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delete__.InternalSwap(&other->delete__);
  replace_.InternalSwap(&other->replace_);
  update_.InternalSwap(&other->update_);
  swap(prefix_, other->prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetResponse::InitAsDefaultInstance() {
  ::gnmi::_SetResponse_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
  ::gnmi::_SetResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::gnmi::Error*>(
      ::gnmi::Error::internal_default_instance());
}
class SetResponse::_Internal {
 public:
  static const ::gnmi::Path& prefix(const SetResponse* msg);
  static const ::gnmi::Error& message(const SetResponse* msg);
};

const ::gnmi::Path&
SetResponse::_Internal::prefix(const SetResponse* msg) {
  return *msg->prefix_;
}
const ::gnmi::Error&
SetResponse::_Internal::message(const SetResponse* msg) {
  return *msg->message_;
}
SetResponse::SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.SetResponse)
}
SetResponse::SetResponse(const SetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::gnmi::Error(*from.message_);
  } else {
    message_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:gnmi.SetResponse)
}

void SetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResponse_gNMI_2eproto.base);
  ::memset(&prefix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&prefix_)) + sizeof(timestamp_));
}

SetResponse::~SetResponse() {
  // @@protoc_insertion_point(destructor:gnmi.SetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete message_;
}

void SetResponse::ArenaDtor(void* object) {
  SetResponse* _this = reinterpret_cast< SetResponse* >(object);
  (void)_this;
}
void SetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResponse& SetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResponse_gNMI_2eproto.base);
  return *internal_default_instance();
}


void SetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.UpdateResult response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .gnmi.Error message = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.UpdateResult response = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_response(i), target, stream);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SetResponse)
  return target;
}

size_t SetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.UpdateResult response = 2;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.SetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.SetResponse)
    MergeFrom(*source);
  }
}

void SetResponse::MergeFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::gnmi::Error::MergeFrom(from._internal_message());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResponse::CopyFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResponse::IsInitialized() const {
  return true;
}

void SetResponse::InternalSwap(SetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResponse, timestamp_)
      + sizeof(SetResponse::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetResponse, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateResult::InitAsDefaultInstance() {
  ::gnmi::_UpdateResult_default_instance_._instance.get_mutable()->path_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
  ::gnmi::_UpdateResult_default_instance_._instance.get_mutable()->message_ = const_cast< ::gnmi::Error*>(
      ::gnmi::Error::internal_default_instance());
}
class UpdateResult::_Internal {
 public:
  static const ::gnmi::Path& path(const UpdateResult* msg);
  static const ::gnmi::Error& message(const UpdateResult* msg);
};

const ::gnmi::Path&
UpdateResult::_Internal::path(const UpdateResult* msg) {
  return *msg->path_;
}
const ::gnmi::Error&
UpdateResult::_Internal::message(const UpdateResult* msg) {
  return *msg->message_;
}
UpdateResult::UpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.UpdateResult)
}
UpdateResult::UpdateResult(const UpdateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::gnmi::Error(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:gnmi.UpdateResult)
}

void UpdateResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateResult_gNMI_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&path_)) + sizeof(op_));
}

UpdateResult::~UpdateResult() {
  // @@protoc_insertion_point(destructor:gnmi.UpdateResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete message_;
}

void UpdateResult::ArenaDtor(void* object) {
  UpdateResult* _this = reinterpret_cast< UpdateResult* >(object);
  (void)_this;
}
void UpdateResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateResult& UpdateResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateResult_gNMI_2eproto.base);
  return *internal_default_instance();
}


void UpdateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.UpdateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.Error message = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gnmi.UpdateResult.Operation op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::gnmi::UpdateResult_Operation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.UpdateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [deprecated = true];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .gnmi.Path path = 2;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::path(this), target, stream);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // .gnmi.UpdateResult.Operation op = 4;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.UpdateResult)
  return target;
}

size_t UpdateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.UpdateResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi.Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int64 timestamp = 1 [deprecated = true];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .gnmi.UpdateResult.Operation op = 4;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.UpdateResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.UpdateResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.UpdateResult)
    MergeFrom(*source);
  }
}

void UpdateResult::MergeFrom(const UpdateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.UpdateResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::gnmi::Error::MergeFrom(from._internal_message());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void UpdateResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.UpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResult::CopyFrom(const UpdateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.UpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResult::IsInitialized() const {
  return true;
}

void UpdateResult::InternalSwap(UpdateResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateResult, op_)
      + sizeof(UpdateResult::op_)
      - PROTOBUF_FIELD_OFFSET(UpdateResult, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::gnmi::_GetRequest_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::gnmi::Path*>(
      ::gnmi::Path::internal_default_instance());
}
class GetRequest::_Internal {
 public:
  static const ::gnmi::Path& prefix(const GetRequest* msg);
};

const ::gnmi::Path&
GetRequest::_Internal::prefix(const GetRequest* msg) {
  return *msg->prefix_;
}
GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_(arena),
  use_models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_),
      use_models_(from.use_models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&type_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:gnmi.GetRequest)
}

void GetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRequest_gNMI_2eproto.base);
  ::memset(&prefix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&prefix_)) + sizeof(encoding_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:gnmi.GetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRequest_gNMI_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  use_models_.Clear();
  if (GetArena() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&type_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .gnmi.GetRequest.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gnmi::GetRequest_DataType>(val));
        } else goto handle_unusual;
        continue;
      // .gnmi.Encoding encoding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::gnmi::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.ModelData use_models = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_use_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Path path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path(i), target, stream);
  }

  // .gnmi.GetRequest.DataType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .gnmi.Encoding encoding = 5;
  if (this->encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_encoding(), target);
  }

  // repeated .gnmi.ModelData use_models = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_use_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_use_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.GetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Path path = 2;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.ModelData use_models = 6;
  total_size += 1UL * this->_internal_use_models_size();
  for (const auto& msg : this->use_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .gnmi.GetRequest.DataType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .gnmi.Encoding encoding = 5;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.GetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  use_models_.MergeFrom(from.use_models_);
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
}

void GetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  use_models_.InternalSwap(&other->use_models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, encoding_)
      + sizeof(GetRequest::encoding_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::gnmi::_GetResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::gnmi::Error*>(
      ::gnmi::Error::internal_default_instance());
}
class GetResponse::_Internal {
 public:
  static const ::gnmi::Error& error(const GetResponse* msg);
};

const ::gnmi::Error&
GetResponse::_Internal::error(const GetResponse* msg) {
  return *msg->error_;
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_(from.notification_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::gnmi::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.GetResponse)
}

void GetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResponse_gNMI_2eproto.base);
  error_ = nullptr;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:gnmi.GetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void GetResponse::ArenaDtor(void* object) {
  GetResponse* _this = reinterpret_cast< GetResponse* >(object);
  (void)_this;
}
void GetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResponse_gNMI_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_.Clear();
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gnmi.Notification notification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .gnmi.Error error = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.Notification notification = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notification(i), target, stream);
  }

  // .gnmi.Error error = 2 [deprecated = true];
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.GetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Notification notification = 1;
  total_size += 1UL * this->_internal_notification_size();
  for (const auto& msg : this->notification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Error error = 2 [deprecated = true];
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.GetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_.MergeFrom(from.notification_);
  if (from.has_error()) {
    _internal_mutable_error()->::gnmi::Error::MergeFrom(from._internal_error());
  }
}

void GetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_.InternalSwap(&other->notification_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapabilityRequest::InitAsDefaultInstance() {
}
class CapabilityRequest::_Internal {
 public:
};

CapabilityRequest::CapabilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.CapabilityRequest)
}
CapabilityRequest::CapabilityRequest(const CapabilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.CapabilityRequest)
}

void CapabilityRequest::SharedCtor() {
}

CapabilityRequest::~CapabilityRequest() {
  // @@protoc_insertion_point(destructor:gnmi.CapabilityRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapabilityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CapabilityRequest::ArenaDtor(void* object) {
  CapabilityRequest* _this = reinterpret_cast< CapabilityRequest* >(object);
  (void)_this;
}
void CapabilityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapabilityRequest& CapabilityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapabilityRequest_gNMI_2eproto.base);
  return *internal_default_instance();
}


void CapabilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.CapabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.CapabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.CapabilityRequest)
  return target;
}

size_t CapabilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.CapabilityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapabilityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.CapabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapabilityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.CapabilityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.CapabilityRequest)
    MergeFrom(*source);
  }
}

void CapabilityRequest::MergeFrom(const CapabilityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.CapabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CapabilityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.CapabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilityRequest::CopyFrom(const CapabilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.CapabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityRequest::IsInitialized() const {
  return true;
}

void CapabilityRequest::InternalSwap(CapabilityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapabilityResponse::InitAsDefaultInstance() {
}
class CapabilityResponse::_Internal {
 public:
};

CapabilityResponse::CapabilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_models_(arena),
  supported_encodings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.CapabilityResponse)
}
CapabilityResponse::CapabilityResponse(const CapabilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_models_(from.supported_models_),
      supported_encodings_(from.supported_encodings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gnmi_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gnmi_version().empty()) {
    gnmi_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gnmi_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.CapabilityResponse)
}

void CapabilityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CapabilityResponse_gNMI_2eproto.base);
  gnmi_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CapabilityResponse::~CapabilityResponse() {
  // @@protoc_insertion_point(destructor:gnmi.CapabilityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapabilityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gnmi_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CapabilityResponse::ArenaDtor(void* object) {
  CapabilityResponse* _this = reinterpret_cast< CapabilityResponse* >(object);
  (void)_this;
}
void CapabilityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapabilityResponse& CapabilityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapabilityResponse_gNMI_2eproto.base);
  return *internal_default_instance();
}


void CapabilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.CapabilityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_models_.Clear();
  supported_encodings_.Clear();
  gnmi_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gnmi.ModelData supported_models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supported_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gnmi.Encoding supported_encodings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_supported_encodings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_supported_encodings(static_cast<::gnmi::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // string gNMI_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gnmi_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.CapabilityResponse.gNMI_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.CapabilityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.ModelData supported_models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supported_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_supported_models(i), target, stream);
  }

  // repeated .gnmi.Encoding supported_encodings = 2;
  {
    int byte_size = _supported_encodings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, supported_encodings_, byte_size, target);
    }
  }

  // string gNMI_version = 3;
  if (this->gnmi_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gnmi_version().data(), static_cast<int>(this->_internal_gnmi_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.CapabilityResponse.gNMI_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gnmi_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.CapabilityResponse)
  return target;
}

size_t CapabilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.CapabilityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.ModelData supported_models = 1;
  total_size += 1UL * this->_internal_supported_models_size();
  for (const auto& msg : this->supported_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Encoding supported_encodings = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_encodings_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_encodings(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supported_encodings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string gNMI_version = 3;
  if (this->gnmi_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gnmi_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapabilityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.CapabilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapabilityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.CapabilityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.CapabilityResponse)
    MergeFrom(*source);
  }
}

void CapabilityResponse::MergeFrom(const CapabilityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.CapabilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_models_.MergeFrom(from.supported_models_);
  supported_encodings_.MergeFrom(from.supported_encodings_);
  if (from.gnmi_version().size() > 0) {
    _internal_set_gnmi_version(from._internal_gnmi_version());
  }
}

void CapabilityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.CapabilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilityResponse::CopyFrom(const CapabilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.CapabilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityResponse::IsInitialized() const {
  return true;
}

void CapabilityResponse::InternalSwap(CapabilityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supported_models_.InternalSwap(&other->supported_models_);
  supported_encodings_.InternalSwap(&other->supported_encodings_);
  gnmi_version_.Swap(&other->gnmi_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelData::InitAsDefaultInstance() {
}
class ModelData::_Internal {
 public:
};

ModelData::ModelData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gnmi.ModelData)
}
ModelData::ModelData(const ModelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization().empty()) {
    organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_organization(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.ModelData)
}

void ModelData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelData_gNMI_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelData::~ModelData() {
  // @@protoc_insertion_point(destructor:gnmi.ModelData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelData::ArenaDtor(void* object) {
  ModelData* _this = reinterpret_cast< ModelData* >(object);
  (void)_this;
}
void ModelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelData& ModelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelData_gNMI_2eproto.base);
  return *internal_default_instance();
}


void ModelData::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.ModelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  organization_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.ModelData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_organization();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.ModelData.organization"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.ModelData.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.ModelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.ModelData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string organization = 2;
  if (this->organization().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization().data(), static_cast<int>(this->_internal_organization().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.ModelData.organization");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_organization(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.ModelData.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.ModelData)
  return target;
}

size_t ModelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.ModelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string organization = 2;
  if (this->organization().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnmi.ModelData)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnmi.ModelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnmi.ModelData)
    MergeFrom(*source);
  }
}

void ModelData::MergeFrom(const ModelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.ModelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.organization().size() > 0) {
    _internal_set_organization(from._internal_organization());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void ModelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnmi.ModelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelData::CopyFrom(const ModelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.ModelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelData::IsInitialized() const {
  return true;
}

void ModelData::InternalSwap(ModelData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  organization_.Swap(&other->organization_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnmi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnmi::Notification* Arena::CreateMaybeMessage< ::gnmi::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Update* Arena::CreateMaybeMessage< ::gnmi::Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::TypedValue* Arena::CreateMaybeMessage< ::gnmi::TypedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::TypedValue >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Path* Arena::CreateMaybeMessage< ::gnmi::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::PathElem_KeyEntry_DoNotUse* Arena::CreateMaybeMessage< ::gnmi::PathElem_KeyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::PathElem_KeyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::PathElem* Arena::CreateMaybeMessage< ::gnmi::PathElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::PathElem >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Value* Arena::CreateMaybeMessage< ::gnmi::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Error* Arena::CreateMaybeMessage< ::gnmi::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Decimal64* Arena::CreateMaybeMessage< ::gnmi::Decimal64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Decimal64 >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::ScalarArray* Arena::CreateMaybeMessage< ::gnmi::ScalarArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::ScalarArray >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SubscribeRequest* Arena::CreateMaybeMessage< ::gnmi::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Poll* Arena::CreateMaybeMessage< ::gnmi::Poll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Poll >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SubscribeResponse* Arena::CreateMaybeMessage< ::gnmi::SubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SubscriptionList* Arena::CreateMaybeMessage< ::gnmi::SubscriptionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SubscriptionList >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Subscription* Arena::CreateMaybeMessage< ::gnmi::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::QOSMarking* Arena::CreateMaybeMessage< ::gnmi::QOSMarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::QOSMarking >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Alias* Arena::CreateMaybeMessage< ::gnmi::Alias >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Alias >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::AliasList* Arena::CreateMaybeMessage< ::gnmi::AliasList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::AliasList >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SetRequest* Arena::CreateMaybeMessage< ::gnmi::SetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SetResponse* Arena::CreateMaybeMessage< ::gnmi::SetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::UpdateResult* Arena::CreateMaybeMessage< ::gnmi::UpdateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::UpdateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::GetRequest* Arena::CreateMaybeMessage< ::gnmi::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::GetResponse* Arena::CreateMaybeMessage< ::gnmi::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::CapabilityRequest* Arena::CreateMaybeMessage< ::gnmi::CapabilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::CapabilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::CapabilityResponse* Arena::CreateMaybeMessage< ::gnmi::CapabilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::CapabilityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::ModelData* Arena::CreateMaybeMessage< ::gnmi::ModelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::ModelData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
